
Proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000248  000002bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c37  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000398  00000000  00000000  0000100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003b1  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000043e  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000058e  00000000  00000000  00001d46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  000022d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  8e:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_ZN10LcdDisplay8init_lcdEv>:
 *  Author: Janakiraman
 */ 

void LcdDisplay::init_lcd()
{
	USART_Init(MYUBRR);
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 00 01 	call	0x200	; 0x200 <_Z10USART_Initj>
  9e:	08 95       	ret

000000a0 <_ZN10LcdDisplay12clearDisplayEv>:
}

void LcdDisplay::clearDisplay()
{
	USART_Sendbyte(0xFE);
  a0:	8e ef       	ldi	r24, 0xFE	; 254
  a2:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
	USART_Sendbyte(0x01);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
  ac:	08 95       	ret

000000ae <_ZN10LcdDisplay13displayStringEPKc>:
}

void LcdDisplay::displayString(const char *str)
{
  ae:	cb 01       	movw	r24, r22
	USART_Send_string(str);
  b0:	0e 94 13 01 	call	0x226	; 0x226 <_Z17USART_Send_stringPKc>
  b4:	08 95       	ret

000000b6 <_ZN10LcdDisplay11blinkCursorEv>:
	USART_Send_int(num);
}

void LcdDisplay::blinkCursor()
{
		USART_Sendbyte(0xFE);
  b6:	8e ef       	ldi	r24, 0xFE	; 254
  b8:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
		USART_Sendbyte(0x0D);
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
  c2:	08 95       	ret

000000c4 <_ZN10LcdDisplay14moveRightTimesEj>:
		USART_Sendbyte(0x18);
	}
}

void LcdDisplay::moveRightTimes(unsigned int i)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
	while(i-->0)
  c8:	61 15       	cp	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	51 f0       	breq	.+20     	; 0xe2 <_ZN10LcdDisplay14moveRightTimesEj+0x1e>
  ce:	eb 01       	movw	r28, r22
	{
		
		USART_Sendbyte(0xFE);
  d0:	8e ef       	ldi	r24, 0xFE	; 254
  d2:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
		USART_Sendbyte(0x1C);
  d6:	8c e1       	ldi	r24, 0x1C	; 28
  d8:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
  dc:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void LcdDisplay::moveRightTimes(unsigned int i)
{
	while(i-->0)
  de:	20 97       	sbiw	r28, 0x00	; 0
  e0:	b9 f7       	brne	.-18     	; 0xd0 <_ZN10LcdDisplay14moveRightTimesEj+0xc>
	{
		
		USART_Sendbyte(0xFE);
		USART_Sendbyte(0x1C);
	}
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <_ZN10LcdDisplay6gotoXYEhj>:
		USART_Sendbyte(0x1C);
	}
}

void LcdDisplay::gotoXY(unsigned char row, unsigned int col)
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	c6 2f       	mov	r28, r22
  ee:	d4 2f       	mov	r29, r20
	USART_Sendbyte(0xFE);
  f0:	8e ef       	ldi	r24, 0xFE	; 254
  f2:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
	if(row==1)
  f6:	c1 30       	cpi	r28, 0x01	; 1
  f8:	29 f4       	brne	.+10     	; 0x104 <_ZN10LcdDisplay6gotoXYEhj+0x1c>
	{
		USART_Sendbyte(0+(col-1)+128);
  fa:	8f e7       	ldi	r24, 0x7F	; 127
  fc:	8d 0f       	add	r24, r29
  fe:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
 102:	06 c0       	rjmp	.+12     	; 0x110 <_ZN10LcdDisplay6gotoXYEhj+0x28>
	}else if(row==2)
 104:	c2 30       	cpi	r28, 0x02	; 2
 106:	21 f4       	brne	.+8      	; 0x110 <_ZN10LcdDisplay6gotoXYEhj+0x28>
	{
		USART_Sendbyte(64+(col-1)+128);
 108:	8f eb       	ldi	r24, 0xBF	; 191
 10a:	8d 0f       	add	r24, r29
 10c:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
	}
}
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <main>:
#include <util/delay.h>
#include "uart.h"
#include "LcdCom.h"

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	1f 92       	push	r1
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	
//	USART_Init(MYUBRR);
//	USART_Sendbyte(0xFE);
//	USART_Sendbyte(0x01);
	LcdDisplay lcd;
	lcd.init_lcd();
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 4b 00 	call	0x96	; 0x96 <_ZN10LcdDisplay8init_lcdEv>
	lcd.clearDisplay();
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN10LcdDisplay12clearDisplayEv>
    while(1)
    {
		
        //TODO:: Please write your application code 
	//	USART_Send_int(i);
	lcd.displayString("Hello");
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	71 e0       	ldi	r23, 0x01	; 1
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	0e 94 57 00 	call	0xae	; 0xae <_ZN10LcdDisplay13displayStringEPKc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	87 ea       	ldi	r24, 0xA7	; 167
 140:	91 e6       	ldi	r25, 0x61	; 97
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x2c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x36>
 14c:	00 00       	nop
		_delay_ms(2000);
		lcd.blinkCursor();
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	0e 94 5b 00 	call	0xb6	; 0xb6 <_ZN10LcdDisplay11blinkCursorEv>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	83 ed       	ldi	r24, 0xD3	; 211
 15a:	90 e3       	ldi	r25, 0x30	; 48
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x46>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x50>
 166:	00 00       	nop
		_delay_ms(1000);
		lcd.clearDisplay();
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN10LcdDisplay12clearDisplayEv>
		lcd.displayString("Moving right 3");
 170:	66 e0       	ldi	r22, 0x06	; 6
 172:	71 e0       	ldi	r23, 0x01	; 1
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 57 00 	call	0xae	; 0xae <_ZN10LcdDisplay13displayStringEPKc>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	83 ed       	ldi	r24, 0xD3	; 211
 180:	90 e3       	ldi	r25, 0x30	; 48
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x6c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x76>
 18c:	00 00       	nop
		_delay_ms(1000);
		lcd.moveRightTimes(3);
 18e:	63 e0       	ldi	r22, 0x03	; 3
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN10LcdDisplay14moveRightTimesEj>
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	83 ed       	ldi	r24, 0xD3	; 211
 19e:	90 e3       	ldi	r25, 0x30	; 48
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x8a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x94>
 1aa:	00 00       	nop
		_delay_ms(1000);
		lcd.clearDisplay();
 1ac:	ce 01       	movw	r24, r28
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN10LcdDisplay12clearDisplayEv>
		lcd.displayString("Going 2,3");
 1b4:	65 e1       	ldi	r22, 0x15	; 21
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	ce 01       	movw	r24, r28
 1ba:	01 96       	adiw	r24, 0x01	; 1
 1bc:	0e 94 57 00 	call	0xae	; 0xae <_ZN10LcdDisplay13displayStringEPKc>
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	83 ed       	ldi	r24, 0xD3	; 211
 1c4:	90 e3       	ldi	r25, 0x30	; 48
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	80 40       	sbci	r24, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xb0>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xba>
 1d0:	00 00       	nop
		_delay_ms(1000);
		lcd.gotoXY(2,3);
 1d2:	43 e0       	ldi	r20, 0x03	; 3
 1d4:	50 e0       	ldi	r21, 0x00	; 0
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0e 94 74 00 	call	0xe8	; 0xe8 <_ZN10LcdDisplay6gotoXYEhj>
		lcd.displayString("Hai");
 1e0:	6f e1       	ldi	r22, 0x1F	; 31
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	ce 01       	movw	r24, r28
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	0e 94 57 00 	call	0xae	; 0xae <_ZN10LcdDisplay13displayStringEPKc>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0xdc>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0xe6>
 1fc:	00 00       	nop
 1fe:	98 cf       	rjmp	.-208    	; 0x130 <main+0x1a>

00000200 <_Z10USART_Initj>:
#include <stdio.h>			// Conversions

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 200:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 204:	80 93 c4 00 	sts	0x00C4, r24
	//Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 208:	88 e1       	ldi	r24, 0x18	; 24
 20a:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 20e:	8e e0       	ldi	r24, 0x0E	; 14
 210:	80 93 c2 00 	sts	0x00C2, r24
 214:	08 95       	ret

00000216 <_Z14USART_Sendbyteh>:


void USART_Sendbyte( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 216:	e0 ec       	ldi	r30, 0xC0	; 192
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	90 81       	ld	r25, Z
 21c:	95 ff       	sbrs	r25, 5
 21e:	fd cf       	rjmp	.-6      	; 0x21a <_Z14USART_Sendbyteh+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = char(data);
 220:	80 93 c6 00 	sts	0x00C6, r24
 224:	08 95       	ret

00000226 <_Z17USART_Send_stringPKc>:
}

void USART_Send_string(const char *str)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24

	while (*str)
 22c:	88 81       	ld	r24, Y
 22e:	88 23       	and	r24, r24
 230:	31 f0       	breq	.+12     	; 0x23e <_Z17USART_Send_stringPKc+0x18>
 232:	21 96       	adiw	r28, 0x01	; 1
	USART_Sendbyte(*str++);
 234:	0e 94 0b 01 	call	0x216	; 0x216 <_Z14USART_Sendbyteh>
}

void USART_Send_string(const char *str)
{

	while (*str)
 238:	89 91       	ld	r24, Y+
 23a:	81 11       	cpse	r24, r1
 23c:	fb cf       	rjmp	.-10     	; 0x234 <_Z17USART_Send_stringPKc+0xe>
	USART_Sendbyte(*str++);
	
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
