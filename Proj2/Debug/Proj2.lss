
Proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000058  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000540  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000308  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000274  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000088  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000246  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000001b8  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	
}*/


int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62

	  ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
	  */

	Servo servo;
	servo.initAttachTimer();
  a0:	ce 01       	movw	r24, r28
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN5Servo15initAttachTimerEv>
	 while (1)
	 {
		 for(int i=0;i<=160;i+=5)
  a8:	00 e0       	ldi	r16, 0x00	; 0
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	0f 2e       	mov	r0, r31
  ae:	f0 ea       	ldi	r31, 0xA0	; 160
  b0:	ef 2e       	mov	r14, r31
  b2:	f0 2d       	mov	r31, r0
  b4:	f1 2c       	mov	r15, r1
  b6:	10 c0       	rjmp	.+32     	; 0xd8 <main+0x42>
		 {
			servo.setDegree(i);
  b8:	b8 01       	movw	r22, r16
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN5Servo9setDegreeEj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	92 e0       	ldi	r25, 0x02	; 2
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x32>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x3c>
  d2:	00 00       	nop

	Servo servo;
	servo.initAttachTimer();
	 while (1)
	 {
		 for(int i=0;i<=160;i+=5)
  d4:	0b 5f       	subi	r16, 0xFB	; 251
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
  d8:	01 3a       	cpi	r16, 0xA1	; 161
  da:	11 05       	cpc	r17, r1
  dc:	6c f3       	brlt	.-38     	; 0xb8 <main+0x22>
  de:	0e 2d       	mov	r16, r14
  e0:	1f 2d       	mov	r17, r15
			_delay_ms(50);
		 }
		
		for(int i=160;i>=0;i-=5)
		{
			servo.setDegree(i);
  e2:	b8 01       	movw	r22, r16
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN5Servo9setDegreeEj>
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	80 e7       	ldi	r24, 0x70	; 112
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x5c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x66>
  fc:	00 00       	nop
		 {
			servo.setDegree(i);
			_delay_ms(50);
		 }
		
		for(int i=160;i>=0;i-=5)
  fe:	05 50       	subi	r16, 0x05	; 5
 100:	11 09       	sbc	r17, r1
 102:	0b 3f       	cpi	r16, 0xFB	; 251
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	12 07       	cpc	r17, r18
 108:	61 f7       	brne	.-40     	; 0xe2 <main+0x4c>
		{
			servo.setDegree(i);
			_delay_ms(50);
		}
		 servo.setDegree(0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN5Servo9setDegreeEj>
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	93 ed       	ldi	r25, 0xD3	; 211
 11a:	20 e3       	ldi	r18, 0x30	; 48
 11c:	81 50       	subi	r24, 0x01	; 1
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	20 40       	sbci	r18, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x86>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x90>
 126:	00 00       	nop
		 _delay_ms(1000);
		 servo.setDegree(160);
 128:	6e 2d       	mov	r22, r14
 12a:	7f 2d       	mov	r23, r15
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN5Servo9setDegreeEj>
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	93 ed       	ldi	r25, 0xD3	; 211
 138:	20 e3       	ldi	r18, 0x30	; 48
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0xa4>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0xae>
 144:	00 00       	nop

	Servo servo;
	servo.initAttachTimer();
	 while (1)
	 {
		 for(int i=0;i<=160;i+=5)
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	c6 cf       	rjmp	.-116    	; 0xd8 <main+0x42>

0000014c <_ZN5Servo9setDegreeEj>:
#include <stdlib.h>


void Servo::setDegree(uint16_t degree)
{
	this->degree = degree;
 14c:	fc 01       	movw	r30, r24
 14e:	71 83       	std	Z+1, r23	; 0x01
 150:	60 83       	st	Z, r22
	
	OCR1A = (int)(500/160)*this->degree+150;
 152:	cb 01       	movw	r24, r22
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	68 0f       	add	r22, r24
 15a:	79 1f       	adc	r23, r25
 15c:	6a 56       	subi	r22, 0x6A	; 106
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	70 93 89 00 	sts	0x0089, r23
 164:	60 93 88 00 	sts	0x0088, r22
 168:	08 95       	ret

0000016a <_ZN5Servo15initAttachTimerEv>:
	TCCR1A |= (1<<COM1A0|1<<COM1A1|1<<COM1B0|1<<COM1B1);
}

void Servo::initAttachTimer()
{
	DDRB |= 1<<DDB1;
 16a:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 16c:	e0 e8       	ldi	r30, 0x80	; 128
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	20 81       	ld	r18, Z
 172:	22 6a       	ori	r18, 0xA2	; 162
 174:	20 83       	st	Z, r18
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 176:	e1 e8       	ldi	r30, 0x81	; 129
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	20 81       	ld	r18, Z
 17c:	2b 61       	ori	r18, 0x1B	; 27
 17e:	20 83       	st	Z, r18
	
	ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 180:	27 e8       	ldi	r18, 0x87	; 135
 182:	33 e1       	ldi	r19, 0x13	; 19
 184:	30 93 87 00 	sts	0x0087, r19
 188:	20 93 86 00 	sts	0x0086, r18
#include <stdlib.h>


void Servo::setDegree(uint16_t degree)
{
	this->degree = degree;
 18c:	fc 01       	movw	r30, r24
 18e:	11 82       	std	Z+1, r1	; 0x01
 190:	10 82       	st	Z, r1
	
	OCR1A = (int)(500/160)*this->degree+150;
 192:	86 e9       	ldi	r24, 0x96	; 150
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	90 93 89 00 	sts	0x0089, r25
 19a:	80 93 88 00 	sts	0x0088, r24
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
