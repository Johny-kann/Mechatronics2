
Proj2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002ea  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000bd1  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000063f  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005ca  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a8  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000040c  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000003f2  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z8adc_readh>:
//}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
//	USART_Send_string("pt");
//}

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;
  ac:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;
  ae:	98 7f       	andi	r25, 0xF8	; 248
  b0:	98 2b       	or	r25, r24
  b2:	90 83       	st	Z, r25

	ADCSRA |= (1<<ADSC);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC));
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <_Z8adc_readh+0x18>
	
	return (ADC);
  c4:	80 91 78 00 	lds	r24, 0x0078
  c8:	90 91 79 00 	lds	r25, 0x0079
}
  cc:	08 95       	ret

000000ce <_Z5readXv>:

uint16_t readX()
{
	
	DDRC &= ~(1<<DDC0 | 1<<DDC2);
  ce:	87 b1       	in	r24, 0x07	; 7
  d0:	8a 7f       	andi	r24, 0xFA	; 250
  d2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC1 | 1<<DDC3);
  d4:	87 b1       	in	r24, 0x07	; 7
  d6:	8a 60       	ori	r24, 0x0A	; 10
  d8:	87 b9       	out	0x07, r24	; 7
	
	PORTC &= ~(1<<PORTC1);
  da:	41 98       	cbi	0x08, 1	; 8
	PORTC |=  (1<<PORTC3);
  dc:	43 9a       	sbi	0x08, 3	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <_Z5readXv+0x14>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_Z5readXv+0x1a>
  e8:	00 00       	nop
	
	_delay_ms(5);
	
	return adc_read(0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8adc_readh>
	
}
  f0:	08 95       	ret

000000f2 <_Z5readYv>:

uint16_t readY()
{
	DDRC &= ~(1<<DDC1 | 1<<DDC3);
  f2:	87 b1       	in	r24, 0x07	; 7
  f4:	85 7f       	andi	r24, 0xF5	; 245
  f6:	87 b9       	out	0x07, r24	; 7
	DDRC |= (1<<DDC0 | 1<<DDC2);
  f8:	87 b1       	in	r24, 0x07	; 7
  fa:	85 60       	ori	r24, 0x05	; 5
  fc:	87 b9       	out	0x07, r24	; 7
	
	PORTC &= ~(1<<PORTC0);
  fe:	40 98       	cbi	0x08, 0	; 8
	PORTC |=  (1<<PORTC2);
 100:	42 9a       	sbi	0x08, 2	; 8
 102:	8f e1       	ldi	r24, 0x1F	; 31
 104:	9e e4       	ldi	r25, 0x4E	; 78
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z5readYv+0x14>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z5readYv+0x1a>
 10c:	00 00       	nop
	
	_delay_ms(5);
	
	return adc_read(1);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z8adc_readh>
}
 114:	08 95       	ret

00000116 <main>:

TouchScreen touchscreen;


int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	1f 92       	push	r1
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
//	int i = 1;

//	DDRC &= ~(0<<DDC1);
	
//	uint16_t adc_result ;
	sei();
 122:	78 94       	sei
	
	StepperMotor stepMotor;
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN12StepperMotorC1Ev>
//	USART_Send_string(" X: ");
//	USART_Send_int(touchscreen.getPosX());
//	USART_Send_string(" Y: ");
//	USART_Send_int(touchscreen.getPosY());
//	_delay_ms(1000);
	stepMotor.moveForward(360,2);
 12c:	42 e0       	ldi	r20, 0x02	; 2
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	68 e6       	ldi	r22, 0x68	; 104
 132:	71 e0       	ldi	r23, 0x01	; 1
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_ZN12StepperMotor11moveForwardEii>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	98 e1       	ldi	r25, 0x18	; 24
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x2c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x36>
 14c:	00 00       	nop
	_delay_ms(500);
	stepMotor.moveBackward(150,3);
 14e:	43 e0       	ldi	r20, 0x03	; 3
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	66 e9       	ldi	r22, 0x96	; 150
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 03 01 	call	0x206	; 0x206 <_ZN12StepperMotor12moveBackwardEii>
 15e:	e6 cf       	rjmp	.-52     	; 0x12c <main+0x16>

00000160 <__vector_11>:
		
    }
}

ISR(TIMER1_COMPA_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
 17c:	bf 93       	push	r27
 17e:	ef 93       	push	r30
 180:	ff 93       	push	r31
	touchscreen.setPosX(readX());
 182:	0e 94 67 00 	call	0xce	; 0xce <_Z5readXv>
 186:	bc 01       	movw	r22, r24
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 31 01 	call	0x262	; 0x262 <_ZN11TouchScreen7setPosXEj>
	touchscreen.setPosY(readY());
 190:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z5readYv>
 194:	bc 01       	movw	r22, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN11TouchScreen7setPosYEj>
 19e:	ff 91       	pop	r31
 1a0:	ef 91       	pop	r30
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	7f 91       	pop	r23
 1ac:	6f 91       	pop	r22
 1ae:	5f 91       	pop	r21
 1b0:	4f 91       	pop	r20
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <_ZN12StepperMotor11moveForwardEii>:
 * Created: 6/11/2015 2:39:08 AM
 *  Author: Janakiraman
 */ 

void StepperMotor::moveForward(int steps,int utime)
{
 1c0:	fc 01       	movw	r30, r24
	this->forward = true;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	82 83       	std	Z+2, r24	; 0x02
	
	PORTD &= ~(1<<DDD2);
 1c6:	5a 98       	cbi	0x0b, 2	; 11
	
	for(int i=0 ; i<steps ; i++)
 1c8:	16 16       	cp	r1, r22
 1ca:	17 06       	cpc	r1, r23
 1cc:	ac f4       	brge	.+42     	; 0x1f8 <_ZN12StepperMotor11moveForwardEii+0x38>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	8f e1       	ldi	r24, 0x1F	; 31
 1d4:	9e e4       	ldi	r25, 0x4E	; 78
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <_ZN12StepperMotor11moveForwardEii+0x16>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN12StepperMotor11moveForwardEii+0x1c>
 1dc:	00 00       	nop
	{
		_delay_us(5000);
		PORTD |= (1<<DDD4);
 1de:	5c 9a       	sbi	0x0b, 4	; 11
 1e0:	8f e1       	ldi	r24, 0x1F	; 31
 1e2:	9e e4       	ldi	r25, 0x4E	; 78
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_ZN12StepperMotor11moveForwardEii+0x24>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_ZN12StepperMotor11moveForwardEii+0x2a>
 1ea:	00 00       	nop
		_delay_us(5000);
		PORTD &= ~(1<<DDD4);
 1ec:	5c 98       	cbi	0x0b, 4	; 11
{
	this->forward = true;
	
	PORTD &= ~(1<<DDD2);
	
	for(int i=0 ; i<steps ; i++)
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	26 17       	cp	r18, r22
 1f4:	37 07       	cpc	r19, r23
 1f6:	69 f7       	brne	.-38     	; 0x1d2 <_ZN12StepperMotor11moveForwardEii+0x12>
		_delay_us(5000);
		PORTD |= (1<<DDD4);
		_delay_us(5000);
		PORTD &= ~(1<<DDD4);
	}
	this->degree+=steps;
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	68 0f       	add	r22, r24
 1fe:	79 1f       	adc	r23, r25
 200:	71 83       	std	Z+1, r23	; 0x01
 202:	60 83       	st	Z, r22
 204:	08 95       	ret

00000206 <_ZN12StepperMotor12moveBackwardEii>:
	
}

void StepperMotor::moveBackward(int steps,int utime)
{
 206:	fc 01       	movw	r30, r24
	this->forward = false;
 208:	12 82       	std	Z+2, r1	; 0x02
	
	PORTD |= (1<<DDD2);
 20a:	5a 9a       	sbi	0x0b, 2	; 11
	
	for(int i=0 ; i<steps ; i++)
 20c:	16 16       	cp	r1, r22
 20e:	17 06       	cpc	r1, r23
 210:	ac f4       	brge	.+42     	; 0x23c <_ZN12StepperMotor12moveBackwardEii+0x36>
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	9e e4       	ldi	r25, 0x4E	; 78
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <_ZN12StepperMotor12moveBackwardEii+0x14>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <_ZN12StepperMotor12moveBackwardEii+0x1a>
 220:	00 00       	nop
	{
		_delay_us(5000);
		PORTD |= (1<<DDD4);
 222:	5c 9a       	sbi	0x0b, 4	; 11
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <_ZN12StepperMotor12moveBackwardEii+0x22>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_ZN12StepperMotor12moveBackwardEii+0x28>
 22e:	00 00       	nop
		_delay_us(5000);
		PORTD &= ~(1<<DDD4);
 230:	5c 98       	cbi	0x0b, 4	; 11
{
	this->forward = false;
	
	PORTD |= (1<<DDD2);
	
	for(int i=0 ; i<steps ; i++)
 232:	2f 5f       	subi	r18, 0xFF	; 255
 234:	3f 4f       	sbci	r19, 0xFF	; 255
 236:	26 17       	cp	r18, r22
 238:	37 07       	cpc	r19, r23
 23a:	69 f7       	brne	.-38     	; 0x216 <_ZN12StepperMotor12moveBackwardEii+0x10>
		PORTD |= (1<<DDD4);
		_delay_us(5000);
		PORTD &= ~(1<<DDD4);
	//	_delay_us(utime);
	}
	this->degree-=steps;
 23c:	80 81       	ld	r24, Z
 23e:	91 81       	ldd	r25, Z+1	; 0x01
 240:	86 1b       	sub	r24, r22
 242:	97 0b       	sbc	r25, r23
 244:	91 83       	std	Z+1, r25	; 0x01
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <_ZN12StepperMotorC1Ev>:
}

 StepperMotor::StepperMotor()
{
	this->degree = 0;
 24a:	fc 01       	movw	r30, r24
 24c:	11 82       	std	Z+1, r1	; 0x01
 24e:	10 82       	st	Z, r1
	this->forward = true;
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	22 83       	std	Z+2, r18	; 0x02
	DDRD |= (1<<DDD2 | 1<<DDD4);
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	84 61       	ori	r24, 0x14	; 20
 258:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1<<DDD2|1<<DDD4);
 25a:	8b b1       	in	r24, 0x0b	; 11
 25c:	8b 7e       	andi	r24, 0xEB	; 235
 25e:	8b b9       	out	0x0b, r24	; 11
 260:	08 95       	ret

00000262 <_ZN11TouchScreen7setPosXEj>:
	return this->posY;
}

void TouchScreen::setPosX(uint16_t x)
{
	this->posX = x;
 262:	fc 01       	movw	r30, r24
 264:	71 83       	std	Z+1, r23	; 0x01
 266:	60 83       	st	Z, r22
 268:	08 95       	ret

0000026a <_ZN11TouchScreen7setPosYEj>:
}

void TouchScreen::setPosY(uint16_t y)
{
	this->posY = y;
 26a:	fc 01       	movw	r30, r24
 26c:	73 83       	std	Z+3, r23	; 0x03
 26e:	62 83       	std	Z+2, r22	; 0x02
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
